apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
    scrape_configs:
    - job_name: "dapr-sidecars"
      scheme: "http"
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels: [__meta_kubernetes_pod_annotation_dapr_io_enabled]
        action: keep
        regex: "true"
      # Les pods ayant l'annotation dapr.io/enabled=true seront scrappés
      # Dapr sidecar expose /metrics sur le port 9090
      metric_relabel_configs:
      - source_labels: [__address__]
        regex: "(.*):.*"
        replacement: "$1:9090"
        target_label: __address__

    # Vous pouvez ajouter une config pour scrapper votre application elle-même
    # si vous exposez /metrics sur le conteneur Node.js, par exemple sur le port 5002
    - job_name: "order-service-app"
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels: [__meta_kubernetes_pod_label_app]
        action: keep
        regex: "order-service"
      metric_relabel_configs:
      - source_labels: [__address__]
        regex: "(.*):.*"
        replacement: "$1:5002"
        target_label: __address__
      # puis /metrics comme endpoint
      metrics_path: /metrics

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      containers:
      - name: prometheus
        image: prom/prometheus:latest
        args:
          - "--config.file=/etc/prometheus/prometheus.yml"
        volumeMounts:
          - name: config-volume
            mountPath: /etc/prometheus
      volumes:
      - name: config-volume
        configMap:
          name: prometheus-config

---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
spec:
  type: NodePort
  selector:
    app: prometheus
  ports:
    - port: 9090
      targetPort: 9090
      nodePort: 30090
